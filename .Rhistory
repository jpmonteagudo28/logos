expect_invisible(peek.data.frame(df1),df1)  # Should print output but not return anything
expect_invisible(peek.data.frame(df2),df2)
})
test_that("peek.data.frame correctly handles an empty data frame", {
expect_invisible(peek.data.frame(df_empty),df_empty)  # Should not error out
})
peek(df_empty)
test_that("peek.data.frame correctly handles an empty data frame", {
expect_warning(peek.data.frame(df_empty),"In max(nchar(names(x))) : no non-missing arguments to max; returning -Inf")  # Should not error out
})
test_that("peek.data.frame correctly handles an empty data frame", {
expect_warning(peek.data.frame(df_empty),"no non-missing arguments to max; returning -Inf")  # Should not error out
})
test_that("peek.data.frame aligns column names correctly", {
expect_silent(peek.data.frame(df1))  # Should ensure alignment of column names
})
test_that("peek.data.frame aligns column names correctly", {
expect_invisible(peek.data.frame(df1))  # Should ensure alignment of column names
})
test_that("peek.data.frame handles different data types", {
expect_invisible(peek.data.frame(df1))  # Should display int, chr, fct, date, and lgl
})
test_that("peek.data.frame aligns column names correctly", {
expect_invisible(peek.data.frame(df1))  # Should ensure alignment of column names
})
test_that("get_display_length adjusts correctly for data types", {
expect_equal(get_display_length(df1$A), 12)   # Integer
expect_equal(get_display_length(df1$B), 8)    # Character
expect_equal(get_display_length(df1$C), 8)    # Factor
})
select_passage(book = "Genesis", chapter = 1, verse = 1, language = "English",testament = "new")
select_passage(book = "Gen", chapter = 1, verse = 1, language = "English",testament = "new")
select_passage(book = "Gn", chapter = 1, verse = 1, language = "English",testament = "new")
select_passage(book = "Gn", chapter = 1, verse = 1, language = "English",testament = "old")
select_passage(testament = "Invalid")
test_that("select_passage enforces valid testament values", {
expect_error(select_passage(testament = "Invalid"),
"testament must be one of \"Old\", \"New\", \"Both\", \"old\", \"new\", \"both\"")
})
test_that("select_passage enforces valid testament values", {
expect_error(select_passage(testament = "Invalid"),
"''arg' should be one of \"Old\", \"New\", \"Both\", \"old\", \"new\", \"both\"")
})
select_passage(testament = "Invalid")
test_that("select_passage enforces valid testament values", {
expect_error(select_passage(testament = "Invalid"),
"arg' should be one of \"Old\", \"New\", \"Both\", \"old\", \"new\", \"both\"")
})
select_passage(language = "Latin")
select_passage(language = "Latin", testament = "new")
test_that("select_passage enforces valid language values", {
expect_error(select_passage(language = "Latin", testament = "new"),
"'arg' must be one of \"English\", \"Hebrew\", \"Greek\"")
})
test_that("select_passage enforces valid language values", {
expect_error(select_passage(language = "Latin", testament = "new"),
"'arg' should be one of \"English\", \"Hebrew\", \"Greek\"")
})
test_that("select_passage enforces numeric chapter and verse", {
expect_error(select_passage(chapter = "One"), "chapter must be a numeric vector.")
expect_error(select_passage(verse = "One"), "verse must be a numeric vector.")
})
test_that("select_passage enforces numeric chapter and verse", {
expect_error(select_passage(chapter = "One", language = "English",testament = "new"), "chapter must be a numeric vector.")
expect_error(select_passage(verse = "One",language = "English",testament = "new"), "verse must be a numeric vector.")
})
test_that("select_passage enforces numeric chapter and verse", {
expect_error(select_passage(chapter = "One", language = "English",testament = "new"), "chapter must be a numeric vector.")
expect_error(select_passage(chapter = 1, verse = "One",language = "English",testament = "new"), "verse must be a numeric vector.")
})
test_that("select_passage enforces correct 'by' usage", {
expect_error(select_passage(book = "Genesis", by = "author"),
"If selecting by author, section, or date, the 'book', 'chapter', and 'verse' arguments must be NULL.")
expect_error(select_passage(by = "invalid"),
"'arg' must be one of \"author\", \"section\", \"date\"")
})
rlang::last_trace()
test_that("select_passage enforces correct 'by' usage", {
expect_error(select_passage(book = "Genesis", by = "author",language = "English",testament = "new"),
"If selecting by author, section, or date, the 'book', 'chapter', and 'verse' arguments must be NULL.")
expect_error(select_passage(by = "invalid",language = "English",testament = "new"),
"'arg' must be one of \"author\", \"section\", \"date\"")
})
test_that("select_passage enforces correct 'by' usage", {
expect_error(select_passage(book = "Genesis", by = "author",language = "English",testament = "new"),
"If selecting by author, section, or date, the 'book', 'chapter', and 'verse' arguments must be NULL.")
expect_error(select_passage(by = "invalid",language = "English",testament = "new"),
"'arg' should be one of \"author\", \"section\", \"date\"")
})
test_that("select_passage requires divider when using 'by'", {
expect_error(select_passage(by = "author",language = "English",testament = "new"),
"A 'divider' must be provided when selecting by criteria.")
})
test_that("select_passage correctly selects by author, section, or date", {
expect_equal(select_passage(by = "author", divider = "Moses",language = "English",testament = "old"), "Books by Moses")
expect_equal(select_passage(by = "section", divider = "Torah",language = "English",testament = "old"), "Books in section Torah")
expect_equal(select_passage(by = "date", divider = "50 AD",language = "English",testament = "new"), "Books from 50 AD")
})
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest"),
"Invalid author provided in 'divider'")
expect_error(select_passage(by = "section", divider = "Unknown"),
"Invalid section provided in 'divider'")
expect_error(select_passage(by = "date", divider = "Unknown"),
"Invalid date provided in 'divider'")
})
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest",language = "English",testament = "new"),
"Invalid author provided in 'divider'")
expect_error(select_passage(by = "section", divider = "Unknown",language = "English",testament = "new"),
"Invalid section provided in 'divider'")
expect_error(select_passage(by = "date", divider = "Unknown",language = "English",testament = "new"),
"Invalid date provided in 'divider'")
})
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest",language = "English",testament = "new"),
"No matching verses found for the given book and chapter.")
expect_error(select_passage(by = "section", divider = "Unknown",language = "English",testament = "new"),
"No matching verses found for the given book and chapter.")
expect_error(select_passage(by = "date", divider = "Unknown",language = "English",testament = "new"),
"No matching verses found for the given book and chapter.")
})
rlang::last_trace()
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest",language = "English",testament = "new"),
"Invalid author provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "section", divider = "Unknown",language = "English",testament = "new"),
"Invalid section provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "date", divider = "Unknown",language = "English",testament = "new"),
"Invalid date provided in 'divider'. Please check 'author_data' for valid options.")
})
select_passage(by = "section", divider = "Unknown",language = "English",testament = "new")
select_passage(by = "date", divider = "Unknown",language = "English",testament = "new")
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest",language = "English",testament = "new"),
"Invalid author provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "section", divider = "Unknown",language = "English",testament = "new"),
"Invalid section provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "date", divider = "Unknown",language = "English",testament = "new"),
"No matching verses found for the given book and chapter.")
})
select_passage(by = "date", divider = "Unknown",language = "English",testament = "new")
select_passage(by = "date", divider = "Some day",language = "English",testament = "new")
test_that("select_passage errors on invalid author, section, or date", {
expect_error(select_passage(by = "author", divider = "Ernest",language = "English",testament = "new"),
"Invalid author provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "section", divider = "Unknown",language = "English",testament = "new"),
"Invalid section provided in 'divider'. Please check 'author_data' for valid options.")
expect_error(select_passage(by = "date", divider = "Some day",language = "English",testament = "new"),
"Invalid date provided in 'divider'. Please check 'author_data' for valid options.")
})
rasb_bible <- data.frame(
book = c("Genesis", "Exodus", "Matthew", "Revelation"),
text = c("In the beginning...", "These are the names...", "The book of the genealogy...", "The revelation of Jesus Christ...")
)
old_testament <- data.frame(book = c("Genesis", "Exodus"), text = c("In the beginning...", "These are the names..."))
new_testament <- data.frame(book = c("Matthew", "Revelation"), text = c("The book of the genealogy...", "The revelation of Jesus Christ..."))
# Tests for get_bible_version
test_that("get_bible_version correctly filters Old Testament", {
expect_equal(
get_bible_version("English", "Old Testament")$book,
c("Genesis", "Exodus")
)
})
rasb_bible_books <- unique(rasb_bible$book)
nt_books <- unique(new_testament$book)
ot_books <- unique(old_testament$book)
devtools::load_all()
rasb_bible_books <- unique(rasb_bible$book)
nt_books <- unique(new_testament$book)
ot_books <- unique(old_testament$book)
# Tests for get_bible_version
test_that("get_bible_version correctly filters Old Testament", {
expect_equal(
get_bible_version("English", "Old Testament")$book,
rasb_bible_books[1:39]
)
})
get_bible_version("English", "Old Testament")$book
# Tests for get_bible_version
test_that("get_bible_version correctly filters Old Testament", {
expect_equal(
unique(get_bible_version("English", "Old Testament")$book),
rasb_bible_books[1:39]
)
})
test_that("get_bible_version correctly filters New Testament", {
expect_equal(
unique(get_bible_version("English", "New Testament")$book),
rasb_bible[40:66]
)
})
test_that("get_bible_version correctly filters New Testament", {
expect_equal(
unique(get_bible_version("English", "New Testament")$book),
rasb_bible_books[40:66]
)
})
test_that("get_bible_version errors for incorrect testament", {
expect_error(get_bible_version("English", "Invalid"), "testament must be one of")
})
get_bible_version("English", "Invalid")
test_that("get_bible_version errors for incorrect testament", {
expect_null(get_bible_version("English", "Invalid"), NULL)
})
test_that("get_bible_version errors for incorrect language", {
expect_null(get_bible_version("Latin", "Old Testament"), NULL)
})
test_that("get_bible_version errors for incorrect language", {
expect_error(get_bible_version("Latin", "Old Testament"), "'arg' should be one of \"English\", \"Hebrew\", \"Greek\"")
})
test_that("get_bible_version errors when Hebrew selected for New Testament", {
expect_error(get_bible_version("Hebrew", "New Testament"), "The Leningrad Codex only includes the Old Testament.")
})
devtools::load_all()
test_that("get_bible_version errors when Greek selected for Old Testament", {
expect_error(get_bible_version("Greek", "Old Testament"), "The Greek New Testament only includes the New Testament.")
})
get_fraction("Gen", chapter = 1, verse = 1:2, fraction = 2,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 6,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 9,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 11,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 13,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 15,part = 1, language = "English",testament = "old")
get_fraction("Gen", chapter = 1, fraction = 15,part = 1, language = "English",testament = "old") -> gen_fraction
gen_fraction
gen_fraction <- c(
"In the beginning God created the heavens and the earth.",
"And the earth was waste and void. And darkness was upon the face of the deep. And the Spirit of God moved upon the face of the waters.",
"And God said, Let there be light. And there was light."
)
# Tests for get_fraction
test_that("get_fraction extracts the correct section", {
result <- get_fraction("Gen", chapter = 1, fraction = 12,part = 1, language = "English",testament = "old")
expect_equal(gen_fraction)
})
# Tests for get_fraction
test_that("get_fraction extracts the correct section", {
result <- get_fraction("Gen", chapter = 1, fraction = 12,part = 1, language = "English",testament = "old")
expect_equal(result,gen_fraction)
})
get_fraction("Jud", 1, 0, 1, language = "English",testament = "new")
test_that("get_fraction errors for invalid fraction and part", {
expect_error(get_fraction("Jud", 1, 0, 1, language = "English",testament = "new"), "Invalid fraction or part. Ensure that fraction >= 1 and 1 <= part <= fraction.")
expect_error(get_fraction("Genesis", 1, 3, 4, language = "Hebrew",testament = "old"), "Invalid fraction or part. Ensure that fraction >= 1 and 1 <= part <= fraction.")
})
test_that("get_fraction correctly handles small chapters", {
retrieve_chapter <- function(book, chapter, fraction, part, language, testament) {
return(1:5)  # Simulating 5 verses in a chapter
}
result <- get_fraction("Genesis", 1, 2, 1)
expect_equal(result, 1:3)
})
get_fraction("Jud", 1, 2, 1, language = "Greek",testament = "new")
get_fraction("Jud", 1, 10, 1, language = "Greek",testament = "new")
jude <- c(
"Ἰούδας Ἰησοῦ Χριστοῦ δοῦλος, ἀδελφὸς δὲ Ἰακώβου, τοῖς ἐν θεῷ πατρὶ ⸀ἠγαπημένοις καὶ Ἰησοῦ Χριστῷ τετηρημένοις κλητοῖς· "  ,
"ἔλεος ὑμῖν καὶ εἰρήνη καὶ ἀγάπη πληθυνθείη. " ,
"Ἀγαπητοί, πᾶσαν σπουδὴν ποιούμενος γράφειν ὑμῖν περὶ τῆς κοινῆς ⸀ἡμῶν σωτηρίας ἀνάγκην ἔσχον γράψαι ὑμῖν παρακαλῶν ἐπαγωνίζεσθαι τῇ ἅπαξ παραδοθείσῃ τοῖς ἁγίοις πίστει. "
)
test_that("get_fraction correctly handles small chapters", {
result <- get_fraction("Jud", 1, 10, 1, language = "Greek",testament = "new")
expect_equal(result, jude)
})
test_that("by_author filters books correctly", {
author_data <- tibble::tibble(
author = c("Moses", "Paul", "John"),
testament = c("Old Testament", "New Testament", "New Testament"),
books = list(c("Genesis", "Exodus"), c("Romans", "Galatians"), c("Revelation"))
)
expect_equal(by_author("Moses", "Old Testament"), c("Genesis", "Exodus"))
expect_equal(by_author("Paul", "New Testament"), c("Romans", "Galatians"))
expect_error(by_author("Luke", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset.")
})
test_that("by_date retrieves books within correct range", {
author_data <- tibble::tibble(
date = c("1445 - 1405 BC", "50 - 60 AD", "90 - 100 AD"),
testament = c("Old Testament", "New Testament", "New Testament"),
books = list(c("Genesis", "Exodus"), c("Romans", "Galatians"), c("Revelation"))
)
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), c("Genesis", "Exodus"))
expect_equal(by_date("50 - 60 AD", "New Testament"), c("Romans", "Galatians"))
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range.")
})
author_data <- tibble::tibble(
author = c("Moses", "Paul", "John"),
testament = c("Old Testament", "New Testament", "New Testament"),
books = list(c("Genesis", "Exodus"), c("Romans", "Galatians"), c("Revelation"))
)
expect_equal(by_author("Moses", "Old Testament"), c("Genesis", "Exodus"))
test_that("by_date retrieves books within correct range", {
author_data <- tibble::tibble(
date = c("1445 - 1405 BC", "50 - 60 AD", "90 - 100 AD"),
testament = c("Old Testament", "New Testament", "New Testament"),
books = list(c("Genesis", "Exodus"), c("Romans", "Galatians"), c("Revelation"))
)
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), c("Genesis", "Exodus"))
expect_equal(by_date("50 - 60 AD", "New Testament"), c("Romans", "Galatians"))
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range.")
})
old_moses <- by_author("Moses", "Old Testament")
old_moses
devtools::load_all()
devtools::load_all()
old_moses <- by_author("Moses", "Old Testament")
old_moses
by_author("Paul", "New Testament")
by_author("Mathias", "New Testament")
old_moses <- c("Gen","Exod","Lev","Num","Deut")
old_moses <- c("Gen","Exod","Lev","Num","Deut")
new_paul <- c("Rom", "1Cor" ,"2Cor", "Gal", "Eph",
"Phil", "Col", "1Thess","2Thess",
"1Tim", "2Tim", "Titus", "Phlm" )
test_that("by_author filters books correctly", {
expect_equal(by_author("Moses", "Old Testament"), c("Genesis", "Exodus"))
expect_equal(by_author("Paul", "New Testament"), c("Romans", "Galatians"))
expect_error(by_author("Mathias", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset. Please, refer to this dataset for a complete list of sections")
})
test_that("by_author filters books correctly", {
expect_equal(by_author("Moses", "Old Testament"), old_moses)
expect_equal(by_author("Paul", "New Testament"), new_paul)
expect_error(by_author("Mathias", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset. Please, refer to this dataset for a complete list of sections")
})
class(by_author("Mathias", "New Testament"))
class(by_author("Mark", "New Testament"))
class(by_author("Paul", "New Testament"))
dim(by_author("Paul", "New Testament"))
?matrix
old_moses <- matrix(c("Gen","Exod","Lev","Num","Deut"),
nrow = 5, ncol = 1)
new_paul <- matrix(c("Rom", "1Cor" ,"2Cor", "Gal", "Eph",
"Phil", "Col", "1Thess","2Thess",
"1Tim", "2Tim", "Titus", "Phlm" ),
nrow = 13, ncol = 1)
test_that("by_author filters books correctly", {
expect_equal(by_author("Moses", "Old Testament"), old_moses)
expect_equal(by_author("Paul", "New Testament"), new_paul)
expect_error(by_author("Mathias", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset. Please, refer to this dataset for a complete list of sections")
})
dimnames(by_author("Paul", "New Testament"))
old_moses <- matrix(c("Gen","Exod","Lev","Num","Deut"),
nrow = 5, ncol = 1)
new_paul <- matrix(c("Rom", "1Cor" ,"2Cor", "Gal", "Eph",
"Phil", "Col", "1Thess","2Thess",
"1Tim", "2Tim", "Titus", "Phlm" ),
nrow = 13, ncol = 1)
dimnames(old_moses) <- c(NULL,"books")
dimnames(old_moses) <- list(NULL,"books")
dimnames(new_paul) <- list(NULL,"books")
test_that("by_author filters books correctly", {
expect_equal(by_author("Moses", "Old Testament"), old_moses)
expect_equal(by_author("Paul", "New Testament"), new_paul)
expect_error(by_author("Mathias", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset. Please, refer to this dataset for a complete list of sections")
})
by_date("50 - 60 AD", "New Testament")
by_date("200 - 300 AD", "New Testament")
by_date("1445 - 1405 BC", "Old Testament")
old_moses <- matrix(c("Gen","Exod","Lev","Num","Deut"),
nrow = 5, ncol = 1,
dimnames =  list(NULL,"books"))
new_paul <- matrix(c("Rom", "1Cor" ,"2Cor", "Gal", "Eph",
"Phil", "Col", "1Thess","2Thess",
"1Tim", "2Tim", "Titus", "Phlm" ),
nrow = 13, ncol = 1,
dimnames = list(NULL,"books"))
new_dates <- matrix(
c("Matthew", "Mark", "Luke", "Romans", "1 Corinthians", "2 Corinthians",
"Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "Philemon"),
ncol = 1,
dimnames = list(NULL, "books")
)
old_dates <- matrix(
c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Psalms"),
ncol = 1,
dimnames = list(NULL, "books")
)
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
old_moses <- matrix(c("Gen","Exod","Lev","Num","Deut"),
nrow = 5, ncol = 1,
dimnames =  list(NULL,"books"))
new_paul <- matrix(c("Rom", "1Cor" ,"2Cor", "Gal", "Eph",
"Phil", "Col", "1Thess","2Thess",
"1Tim", "2Tim", "Titus", "Phlm" ),
nrow = 13, ncol = 1,
dimnames = list(NULL,"books"))
new_dates <- matrix(
c("Matthew", "Mark", "Luke", "Romans", "1 Corinthians", "2 Corinthians",
"Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "Philemon"),
ncol = 1,
nrow = 13,
dimnames = list(NULL, "books")
)
old_dates <- matrix(
c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Psalms"),
ncol = 1,
nrow = 7,
dimnames = list(NULL, "books")
)
test_that("by_author filters books correctly", {
expect_equal(by_author("Moses", "Old Testament"), old_moses)
expect_equal(by_author("Paul", "New Testament"), new_paul)
expect_error(by_author("Mathias", "New Testament"),
"The section selected does not match any of the sections contained in the 'author_data' dataset. Please, refer to this dataset for a complete list of sections")
})
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
?data.frame
class(by_date("1445 - 1405 BC", "Old Testament"))
nrow(by_date("1445 - 1405 BC", "Old Testament"))
new_dates <- data.frame(
c("Matthew", "Mark", "Luke", "Romans", "1 Corinthians", "2 Corinthians",
"Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "Philemon")
)
nrow(new_dates)
old_dates <- data.frame(
c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Psalms")
)
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
new_dates <- data.frame(
"Matthew", "Mark", "Luke", "Romans", "1 Corinthians", "2 Corinthians",
"Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "Philemon"
)
old_dates <- data.frame(
"Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Psalms"
)
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
by_date("1445 - 1405 BC", "Old Testament") -> test
test
new_dates <- data.frame(
books = c("Matthew", "Mark", "Luke", "Romans", "1 Corinthians", "2 Corinthians",
"Galatians", "Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "Philemon"),
stringsAsFactors = FALSE
)
old_dates <- data.frame(
books = c("Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Psalms"),
stringsAsFactors = FALSE
)
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
by_date("200 - 300 AD", "New Testament")
devtools::load_all()
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament our outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),
"The date is not compatible with the testament or is outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),"The date is not compatible with the testament or is outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
expect_warning(by_date("200 - 300 AD", "New Testament"),"The date is not compatible with the testament or is outside the correct date range. Refer to the 'by_date()' documentation for help.")
})
test_that("by_date retrieves books within correct range", {
expect_equal(by_date("1445 - 1405 BC", "Old Testament"), old_dates)
expect_equal(by_date("50 - 60 AD", "New Testament"), new_dates)
captured_warning <- capture_warnings(by_date("200 - 300 AD", "New Testament"))
print(captured_warning)  # Check the actual captured warning
expect_true(any(grepl("The date is not compatible", captured_warning)))
})
devtools::check()
devtools::check(remote = TRUE, manual = TRUE)
