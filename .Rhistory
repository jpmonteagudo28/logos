"1 John", "2 John", "3 John", "Jude", "Revelation"
)
books = c(
# Old Testament
"Genesis", "Exodus", "Leviticus", "Numbers", "Deuteronomy",
"Joshua", "Judges", "Ruth", "1 Samuel", "2 Samuel",
"1 Kings", "2 Kings", "1 Chronicles", "2 Chronicles",
"Ezra", "Nehemiah", "Esther", "Job", "Psalms", "Proverbs",
"Ecclesiastes", "Song of Solomon", "Isaiah", "Jeremiah",
"Lamentations", "Ezekiel", "Daniel", "Hosea", "Joel",
"Amos", "Obadiah", "Jonah", "Micah", "Nahum", "Habakkuk",
"Zephaniah", "Haggai", "Zechariah", "Malachi",
# New Testament
"Matthew", "Mark", "Luke", "John", "Acts",
"Romans", "1 Corinthians", "2 Corinthians", "Galatians",
"Ephesians", "Philippians", "Colossians", "1 Thessalonians",
"2 Thessalonians", "1 Timothy", "2 Timothy", "Titus",
"Philemon", "Hebrews", "James", "1 Peter", "2 Peter",
"1 John", "2 John", "3 John", "Jude", "Revelation"
)
testament = c(
rep("Old Testament", 39),
rep("New Testament", 27)
)
39+27
directory_path <- "raw_data/rasv"
# Get a list of all text files in the directory
file <- list.files(directory_path,
pattern = "\\.db$",
full.names = TRUE)
file_data <- read.delim(file, header = FALSE)
# Debugging: Check the file data
print(head(file_data))  # Ensure the file is being read correctly
# Extract the header name
colnames(file_data)[1] <- "Text"
# Process the data
processed_file <- file_data |>
as.data.frame() |>
rename(raw = everything()) |>
separate(raw, into = c("book", "chapter", "verse", "text"),
sep = "\\|") |>
mutate(
chapter = as.integer(chapter),
verse = as.integer(verse),
book = first_to_upper(book)
)
library(dplyr)
library(tidyr)
library(stringr)
processed_file <- file_data |>
as.data.frame() |>
rename(raw = everything()) |>
separate(raw, into = c("book", "chapter", "verse", "text"),
sep = "\\|") |>
mutate(
chapter = as.integer(chapter),
verse = as.integer(verse),
book = first_to_upper(book)
)
rasb_bible <- processed_file |> cbind(testament)
get_bible_version <- function(language,testament){
language <- match.arg(language,
c("English","Hebrew","Greek"),
several.ok = FALSE)
testament <- match.arg(testament,
c("Old","New","Both"),
several.ok = FALSE)
# Define book ranges for the Old and New Testament
old_testament_books <- 1:39   # Books 1 to 39
new_testament_books <- 40:66  # Books 40 to 66
# Filter the dataset based on language and testament
bible_version <- switch(language,
"English" = {
if (!"book_number" %in% colnames(rasb_bible)) {
stop("The provided dataset must contain a 'book_number' column.")
}
switch(testament,
"Old" = rasb_bible |>
dplyr::filter(
book_number %in% old_testament_books
),
"New" = rasb_bible |>
dplyr::filter(
book_number %in% new_testament_books
),
"Both" = rasb_bible
)
},
"Hebrew" = switch(testament,
"Old" = old_testament,
),
"Greek" = switch(testament,
"Old" = new_testament
)
)
return(bible_version)
}
get_bible_version("English","Old")-> old_rasb
books <- unique(rasb_bible$book)
books[1:39]
books[40:66]
get_bible_version("English","Old")
get_bible_version <- function(language,testament){
language <- match.arg(language,
c("English","Hebrew","Greek"),
several.ok = FALSE)
testament <- match.arg(testament,
c("Old","New","Both"),
several.ok = FALSE)
# Define book ranges for the Old and New Testament
books <- unique(rasb_bible$book)
old_testament_books <- books[1:39]   # Books 1 to 39
new_testament_books <- books[40:66]  # Books 40 to 66
# Filter the dataset based on language and testament
bible_version <- switch(language,
"English" = {
if (!"book" %in% colnames(rasb_bible)) {
stop("The provided dataset must contain a 'book' column.")
}
switch(testament,
"Old" = rasb_bible |>
dplyr::filter(
books %in% old_testament_books
),
"New" = rasb_bible |>
dplyr::filter(
books %in% new_testament_books
),
"Both" = rasb_bible
)
},
"Hebrew" = switch(testament,
"Old" = old_testament,
),
"Greek" = switch(testament,
"Old" = new_testament
)
)
return(bible_version)
}
get_bible_version("English","Old")
get_bible_version("English","Old")
get_bible_version <- function(language,testament){
language <- match.arg(language,
c("English","Hebrew","Greek"),
several.ok = FALSE)
testament <- match.arg(testament,
c("Old","New","Both"),
several.ok = FALSE)
# Define book ranges for the Old and New Testament
books <- unique(rasb_bible$book)
old_testament_books <- books[1:39]   # Books 1 to 39
new_testament_books <- books[40:66]  # Books 40 to 66
# Filter the dataset based on language and testament
bible_version <- switch(language,
"English" = {
if (!"book" %in% colnames(rasb_bible)) {
stop("The provided dataset must contain a 'book' column.")
}
switch(testament,
"Old" = rasb_bible |>
dplyr::filter(
book %in% old_testament_books
),
"New" = rasb_bible |>
dplyr::filter(
book %in% new_testament_books
),
"Both" = rasb_bible
)
},
"Hebrew" = switch(testament,
"Old" = old_testament,
),
"Greek" = switch(testament,
"Old" = new_testament
)
)
return(bible_version)
}
get_bible_version("English","Old")
old_rasb <- get_bible_version("English","Old")
View(old_rasb)
test2 <- get_bible_version("Greek")
test2 <- get_bible_version("Greek","New")
get_bible_version <- function(language,testament){
language <- match.arg(language,
c("English","Hebrew","Greek"),
several.ok = FALSE)
testament <- match.arg(testament,
c("Old","New","Both"),
several.ok = FALSE)
# Define book ranges for the Old and New Testament
books <- unique(rasb_bible$book)
old_testament_books <- books[1:39]   # Books 1 to 39
new_testament_books <- books[40:66]  # Books 40 to 66
# Filter the dataset based on language and testament
bible_version <- switch(language,
"English" = {
if (!"book" %in% colnames(rasb_bible)) {
stop("The provided dataset must contain a 'book' column.")
}
switch(testament,
"Old" = rasb_bible |>
dplyr::filter(
book %in% old_testament_books
),
"New" = rasb_bible |>
dplyr::filter(
book %in% new_testament_books
),
"Both" = rasb_bible
)
},
"Hebrew" = switch(testament,
"Old" = old_testament,
"New" = stop("The Hebrew Bible only includes the Old Testament."),
"Both" = stop("The Hebrew Bible only includes the Old Testament.")
),
"Greek" = switch(testament,
"New" = new_testament,
"Old" = "Septuagint (Greek Old Testament)",
"Both" = "Septuagint & Greek New Testament")
)
return(bible_version)
}
test2 <- get_bible_version("Greek","New")
View(test2)
7939+23145+0
test2 <- get_bible_version("Greek","Old")
get_bible_version <- function(language,testament){
language <- match.arg(language,
c("English","Hebrew","Greek"),
several.ok = FALSE)
testament <- match.arg(testament,
c("Old","New","Both"),
several.ok = FALSE)
# Define book ranges for the Old and New Testament
books <- unique(rasb_bible$book)
old_testament_books <- books[1:39]   # Books 1 to 39
new_testament_books <- books[40:66]  # Books 40 to 66
# Filter the dataset based on language and testament
bible_version <- switch(language,
"English" = {
if (!"book" %in% colnames(rasb_bible)) {
stop("The provided dataset must contain a 'book' column.")
}
switch(testament,
"Old" = rasb_bible |>
dplyr::filter(
book %in% old_testament_books
),
"New" = rasb_bible |>
dplyr::filter(
book %in% new_testament_books
),
"Both" = rasb_bible
)
},
"Hebrew" = switch(testament,
"Old" = old_testament,
"New" = stop("The Leningrad Codex only includes the Old Testament."),
"Both" = stop("The Leningrad Codex only includes the Old Testament.")
),
"Greek" = switch(testament,
"New" = new_testament,
"Old" = stop("The Septuagint only includes the New Testament."),
"Both" = stop("The Septuagint only includes the New Testament.")
)
)
return(bible_version)
}
test2 <- get_bible_version("Greek","Old")
renv::status()
renv::snapshot()
devtools::load_all()
View(rasb_bible)
validate_book("Genesis",rasb_bible$book)
validate_book("Gene",rasb_bible$book)
retrieve_chapter("Gen",fraction = 2,part = 3,"English","Old")
retrieve_chapter("Gen",fraction = 2,part = 3,"English","Old")
retrieve_chapter("Gen",fraction = 2,part = 3,language = "English",testament = "Old")
usethis::use_import_from("dplyr","filter")
usethis::use_import_from("dplyr","slice")
usethis::use_import_from("dplyr","arrange")
retrieve_chapter("Gen",fraction = 2,part = 3,language = "English",testament = "Old")
retrieve_chapter("Gen",chapter = 2,fraction = 2,part = 3,language = "English",testament = "Old")
retrieve_chapter("Gen",chapter = 2,fraction = 2,part = 1,language = "English",testament = "Old")
retrieve_chapter("Gen",chapter = 2:4,fraction = 2,part = 1,language = "English",testament = "Old") -> test
View(test)
retrieve_chapter("Gen",chapter = 2:4,fraction = 1,part = 1,language = "English",testament = "Old") -> test
bible
devtools::load_all()
retrieve_chapter("Gen",1,language = "English",testament = "old")
by_section("Law","new")
by_section("Law","old")
by_section("Law","new")
length(by_section("Law","new"))
is.logical(by_section("Law","new"))
class(by_section("Law","new"))
by_section("Law","new") -> test
View(test)
is.logical(by_section("Law","new"))[[1]]
length(by_section("Law","new"))[[1]]
length(test[[books]]) == 0
length(test[[1]]) == 0
is_empty(test[[1]])
is_empty <- function(x) {
(length(x) == 0)
}
is_empty(test[[1]])
by_section("Leter","new") -> test
renv::snapshot()
by_section("Law","new")
devtools::load_all()
by_section("Law","new")
devtools::load_all()
by_author("Moses","new")
by_date("1440 BC","new")
by_date("1440 BC","old")
by_date("1440 - 1400 BC","old")
View(author_data)
by_date("c. 1440 - 1400 BC","old")
by_date("c. 1440 - 1300 BC","old")
by_date("1445 - 1405 BC", "old")
by_date("1445 - 1405", "old")
by_date("65 AD", "old")
by_date("65-60 AD", "old")
by_date("65-60 AD", "old")
by_date("65-60 AD", "new")
by_date("c. 1445-1405 BC","old")
by_date("1445-1405 BC","old")
default_date <- unique(author_data$date)
old_regex <- "\\bc\\.\\s*(\\d{3,4})(?:-(\\d{3,4}))?\\s*BC|Unknown\\b"
new_regex <- "\\b(c\\.\\s*\\d{1,2}(?:-\\d{1,2})?\\s*AD)|Unknown\\b"
chosen_testament <- "New Testament"; regex <- if (chosen_testament == "New Testament") new_regex else old_regex
matches <- grep("60 - 65 AD", default_date, value = TRUE)
matches <- grep("60-65 AD", default_date, value = TRUE)
default_date
matches <- grep("c. 60-65 AD", default_date, value = TRUE)
matches <- grep("c. 60-65AD", default_date, value = TRUE)
matches <- grep("(c. 60-65 AD)", default_date, value = TRUE)
new_regex <- "c\\.\\s*\\d{1,3}(?:-\\d{1,3})?\\s*AD|Unknown"
old_regex <- "\\bc\\.\\s*(\\d{3,4})(?:-(\\d{3,4}))?\\s*BC|Unknown\\b"
new_regex <- "c\\.\\s*\\d{1,3}(?:-\\d{1,3})?\\s*AD|Unknown"
chosen_testament <- "New Testament"; regex <- if (chosen_testament == "New Testament") new_regex else old_regex
matches <- grep("60 - 65 AD", default_date, value = TRUE)
matches <- grep("65 AD", default_date, value = TRUE)
matches <- grep("1365 BC", default_date, value = TRUE)
matches <- grep("1365-1200 BC", default_date, value = TRUE)
matches <- grep("65 - 70 AD", default_date, value = TRUE)
matches <- grep("65 - 70AD", default_date, value = TRUE)
default_date
devtools::load_all()
by_date("1445-1405 BC","old")
devtools::load_all()
by_date("1445-1405 BC","old")
peek(author_data)
devtools::load_all()
by_date("1445-1405 BC","old")
devtools::load_all()
by_date("1445-1405 BC","old")
by_date("60-65 AD","old")
by_date("65 AD","old")
devtools::load_all()
by_date("1445-1405 BC","old")
by_date("65 AD","new")
by_date("65-70 AD","new")
by_date("70 AD","new")
by_date("70 AD","old")
by_date("100 AD","new")
devtools::load_all()
by_date("100 AD","new")
by_date("90 AD","new")
by_date("90-100 AD","new")
by_section("Apocaliptic","new")
by_section("Apocalyptic","new")
get_fraction("John",1,language = "English",testament = "new")
get_fraction("John",1,fraction = 1, part = 1, language = "English",testament = "new")
retrieve_chapter("Mark",c(1,2),language = "English",testament = "new")
retrieve_chapter("Mark",c(1,2),raction = 3, part = 2,language = "English",testament = "new")
retrieve_chapter("Mark",c(1,2),fraction = 3, part = 2,language = "English",testament = "new")
by_date("c. 1445 - 1405 BC","old")
?match.arg
length(1L:10L)
retrieve_chapter("John",c(1,2),fraction = 3, part = 2, language = "Greek",testament = "new")
View(rasb_bible)
View(old_testament)
devtools::load_all()
select_passage("John",1,1:18,language = "English",testament = "new")
devtools::load_all()
select_passage("John",1,1:18,language = "English",testament = "new")
select_passage("John",1,1:18,by = NULL,language = "English",testament = "new")
devtools::load_all()
select_passage("John",1,1:18,by = NULL,language = "English",testament = "new")
devtools::load_all()
select_passage("John",1,1:18,by = NULL,language = "English",testament = "new")
select_passage("John",1,1:18,fraction = 2, part = 2,by = NULL,language = "English",testament = "new")
select_passage("Matthew",18,20,language = "English",testament = "new")
View(rasb_bible)
select_passage("Mat",18,20,language = "English",testament = "new")
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Mat",18,verse = 20,language = "English",testament = "new")
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
validate_book("Mat")
validate_book("Mat",rasb_bible$book)
validate_book("Mat",author_data$books)
select_passage("Matthew",18,verse = 20,language = "English",testament = "new")
devtools::load_all()
devtools::load_all()
get_book_list("English")
devtools::load_all()
devtools::load_all()
select_passage("Matthew",18,verse = 20,language = "English",testament = "new")
get_book_list("English")
available_books <- get_book_list("English")
books <- validate_book("Matthew", available_books)
available_books <- get_book_list("English")
validate_book("Matthew", available_books)
available_books <- get_book_list("English")
validate_book("Mat", available_books)
available_books <- get_book_list("English")
validate_book("Mt", available_books)
available_books <- get_book_list("English")
validate_book("Matt", available_books)
available_books <- get_book_list("English")
validate_book("Mat", available_books)
View(rasb_bible)
available_books <- get_book_list("Greek")
validate_book("Mat", available_books)
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Mth",18,verse = 20,language = "English",testament = "new")
devtools::load_all()
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
select_passage("Matthew",18,verse = 20,language = "English",testament = "new")
retrieve_passage("Matthew",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Matthew",18,verse = 20,language = "English",testament = "new")
validate_book("Matthew",available_books)
retrieve_chapter("Matt",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Mat",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Math",18,verse = 20,language = "English",testament = "new")
select_passage("Matt",18,verse = 20,language = "English",testament = "new")
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
devtools::load_all()
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
select_passage("Matt",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Matt",18,verse = 20,language = "English",testament = "new")
retrieve_chapter("Mat",18,verse = 20,language = "English",testament = "new")
select_passage("Mat",18,verse = 20,language = "English",testament = "new")
select_passage("Matthew",18,verse = 20,language = "English",testament = "new")
select_passage("Matthew",18,verse = 20,language = "Greek",testament = "new")
select_passage("Matt",18,verse = 20,language = "Greek",testament = "new")
select_passage("Gen",1,1,language = "Hebrew","old")
select_passage("Gen",1,1,language = "Hebrew",testament = "old")
devtools::load_all()
select_passage("Mat",chapter = 18, verse = 20, language = "Greek",testament = "new")
select_passage("Mat",chapter = 18, verse = 1:20, language = "Greek",testament = "new")
select_passage("Mat",chapter = 18, verse = 1:20,fraction = 2,part = 1, language = "Greek",testament = "new")
select_passage(book = "Genesis", chapter = 1, verse = 1, testament = "Old")
select_passage(by = "author", testament = "New")
devtools::load_all()
select_passage(by = "author",divider = "Moses", testament = "New")
select_passage(by = "author",divider = "Mark", testament = "New")
select_passage(by = "author",divider = "Paul", testament = "New")
select_passage(by = "author",divider = "Paul", language = "English",testament = "New")
validate_book(c("Rom","Mat","Eph"),rasb_bible$book)
retrieve_chapter(c("Rom","Mat","Eph"),language = "English",testament = "new")
devtools::load_all()
devtools::load_all()
retrieve_chapter(c("Rom","Mat","Eph"),language = "English",testament = "new")
retrieve_chapter(c("Rom","Mat","Eph"),language = "English",testament = "new")
devtools::load_all()
retrieve_chapter(c("Rom","Mat","Eph"),language = "English",testament = "new")
devtools::load_all()
retrieve_chapter(c("Rom","Mat","Eph"),language = "English",testament = "new")
select_passage(by = "author",divider = "Mark", testament = "New")
books <- author_data |>
dplyr::group_by(author) |>
dplyr::filter(author == "Mark",
testament == "New Testament") |>
dplyr::ungroup() |>
dplyr::select(books)
sapply(books, standardize_name)
books <- author_data |>
dplyr::group_by(author) |>
dplyr::filter(author == "Paul",
testament == "New Testament") |>
dplyr::ungroup() |>
dplyr::select(books)
sapply(books, standardize_name)
class(sapply(books, standardize_name))
apply(books, standardize_name)
sapply(books, standardize_name)
sapply(books, standardize_name) -> test
devtools::load_all()
select_passage(by = "author",divider = "Mark", testament = "New")
select_passage(by = "author",divider = "Paul", testament = "New")
select_passage(by = "author",chapter = 1, divider = "Paul", testament = "New")
devtools::document()
devtools::check()
by_author("Matthew","new")
peek(verses_by_book)
?menu
devtools::check()
devtools::check()
devtools::check()
utils::globalVariables("author_data")
?globalVariables
utils::globalVariables(c("rasb_bible","new_testament","old_testament"))
devtools::check()
devtools::check()
devtools::check()
