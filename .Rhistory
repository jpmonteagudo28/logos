devtools::document()
load("data/author_data.rda")
load("data/new_testament.rda")
load("data/old_testament.rda")
load("data/rasb_bible.rda")
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup()
View(verse_counts)
author_data
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \\U\\2")
)
View(verse_counts)
verse_counts
text <- "1jn 2pe 3jn"
result <- gsub("(\\d)([a-zA-Z])", "\\1 \\U\\2", text, perl = TRUE)
print(result)
# Output: "1 Jn 2 Pe 3 Jn"
replace_char <- function(.input_string,
old_char,
new_char,
use_regex = FALSE) {
if (old_char == "" || is.null(old_char)) {
stop("Error: The character to replace cannot be empty.")
}
gsub(old_char,
new_char,
.input_string,
fixed = !use_regex)
}
#---- ---- --- --- ---- ---- --- --- ---- ----#
first_to_upper <- function(.x, split_by = " ") {
stopifnot(is.character(.x),
is.character(split_by))
result <- sapply(.x, function(x) {
string <- strsplit(x, split_by)[[1]]
paste(toupper(substring(string, 1, 1)),
substring(string, 2),
sep = "", collapse = " ")
})
return(result)
}
#---- ---- --- --- ---- ---- --- --- ---- ----#
# Kind of obvious-the opposite of the function
# above.
first_to_lower <- function(.x, split_by = " ") {
stopifnot(is.character(.x),
is.character(split_by))
result <- sapply(.x, function(x) {
string <- strsplit(x, split_by)[[1]]
paste(tolower(substring(string, 1, 1)),
substring(string, 2),
sep = "", collapse = " ")
})
return(result)
}
load("data/author_data.rda")
load("data/new_testament.rda")
load("data/old_testament.rda")
load("data/rasb_bible.rda")
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \\U\\2")
)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \\U\\2"),
use_regex = TRUE
)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \\U\\2",use_regex = TRUE)
)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \U\\2",use_regex = TRUE)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\1 \\U\\2",use_regex = TRUE)
)
View(verse_counts)
#---- ---- --- --- ---- ---- --- --- ---- ----#
space_to_upper <- function(match) {
paste0(substr(match, 1, 1), " ", toupper(substr(match, 2, 2)))
}
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",space_to_upper(book),
use_regex = TRUE)
)
View(verse_counts)
space_to_upper(verse_counts$book)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",\\U\\1\\E \\2,
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])","\\U\\1\\E \\2",
use_regex = TRUE)
)
View(verse_counts)
toupper
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",
replacement = function(match) {
paste0(substr(match, 1, 1),
" ",
toupper(substr(match, 2, 2)))
},
use_regex = TRUE)
)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",
function(match) {
paste0(substr(match, 1, 1),
" ",
toupper(substr(match, 2, 2)))
},
use_regex = TRUE)
)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",
"_",
use_regex = FALSE)
)
View(verse_counts)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup() |>
dplyr::mutate(book = replace_char(book,
"(\\d)([a-zA-Z])",
"_",
use_regex = TRUE)
)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup()
View(verse_counts)
View(verse_counts)
View(new_testament)
verse_counts$books
verse_counts$book
View(new_testament)
View(old_testament)
bible_books <- c(
"1Chr", "1Cor", "1John", "1Kgs", "1Pet", "1Sam", "1Thess", "1Tim",
"2Chr", "2Cor", "2John", "2Kgs", "2Pet", "2Sam", "2Thess", "2Tim",
"3John", "Acts", "Amos", "Col", "Dan", "Deut", "Ecc", "Eph", "Est",
"Exod", "Ezek", "Ezra", "Gal", "Gen", "Hab", "Hag", "Heb", "Hos",
"Isa", "Jude", "Jdg", "Jer", "John", "Jas", "Jon", "Job", "Joel",
"Josh", "Lam", "Lev", "Luke", "Mal", "Mic", "Mark", "Matt", "Nah",
"Neh", "Num", "Obad", "Phil", "Phlm", "Prov", "Psms", "Rev", "Rom",
"Ruth", "Song", "Titus", "Zech", "Zeph"
)
verse_counts <- verse_counts |>
mutate(
book = bible_books
)
verse_counts <- verse_counts |>
dplyr::mutate(
book = bible_books
)
View(verse_counts)
View(verse_counts)
verse_counts <- rasb_bible |>
dplyr::group_by(book) |>
dplyr::count()|>
dplyr::ungroup()
View(verse_counts)
bible_books
verse_count <- verse_counts |>
dplyr::mutate(
book = bible_books
)
verses_by_book <- verse_counts |>
dplyr::mutate(
book = bible_books
)
verse_counts$book
View(verse_counts)
usethis::use_data(verses_by_book)
load("C:/Users/jpmonteagudo/Desktop/R/logos/data/verses_by_book.rda")
View(verses_by_book)
test <- rep(paste0(seq(a:z),seq(1:10)),times = 12)
test <- rep(paste0(seq(letters),seq(1:10)),times = 12)
test
test <- rep(paste0(c(seq(letters),seq(1:10))),times = 12)
test
seq(letters)
letters
test <- rep(paste0(c(letters,seq(1:10))),times = 12)
test
paste0(sample(letters),seq(1,10))
paste0(1:20,sample(letters))
paste0(1:20,sample(letters)) -> test
space_to_upper(test)
devtools::build_readme()
load("data/author_data.rda")
load("data/old_testament.rda")
load("data/new_tesament.rda")
load("data/new_testament.rda")
load("data/verses_by_book.rda")
View(author_data)
`%!in%` <- Negate(`%in%`)
default <- author_data$author
"moses" %!in% default
author_data$date
?grep
grep("\\dd -\\d",author_data$date)
pattern <- "c\\. \\d{2}-\\d{2} (BC|AD)"
matches <- grep(pattern, author_data$date, value = TRUE)
matches
regex <- "\\bc\\.\\s*(\\d{1,2}(?:-\\d{1,2})?)\\s*(BC|AD|AC)\\b"
pattern <- "c\\. \\d{2}-\\d{2} (BC|AD)"
matches <- grep(regex, author_data$date, value = TRUE)
matches
regex <- "\\bc\\.\\s*(\\d{3,4}(?:-\\d{3,4})?)\\s*(BC)|Unknown\\b"
pattern <- "c\\. \\d{2}-\\d{2} (BC|AD)"
matches <- grep(regex, author_data$date, value = TRUE)
matches
"James" %!in% author_data$author
"James" %in% author_data$author
gc()
peek.default <- function(x, ...) {
cat("<Default object of class ", class(x)[1], ">\n", sep = "")
invisible(x)
}
#' @export
peek.data.frame <- function(x, ...) {
# Get the number of rows and columns
n_rows <- nrow(x)
n_cols <- ncol(x)
# Display rows and columns
display_rows_and_columns(n_rows, n_cols)
# Calculate the maximum column name length
max_col_name_length <- find_colname_length(x)
# Display each column with dynamically calculated vector length
display_columns(x, max_col_name_length)
invisible(x)
}
# Function to display number of rows and columns
display_rows_and_columns <- function(n_rows, n_cols) {
cat("Rows:", n_rows, "\n")
cat("Columns:", n_cols, "\n")
cat("-------------------------\n")
}
# Function to display columns with name, class, and first few elements
display_columns <- function(x, max_col_name_length) {
# Create a mapping of class names to abbreviations
class_abbreviations <- get_class_abbreviations()
# Loop over columns and display each one
for (col_name in names(x)) {
# Get the first few values for each column
col_values <- utils::head(x[[col_name]], get_display_length(x[[col_name]]))
col_class <- class(x[[col_name]])[1]
# Use abbreviation if available, otherwise keep the full class name
col_class_abbr <- class_abbreviations[[col_class]] %||% paste("<", col_class, ">")
# Convert factors to character for display
if (is.factor(x[[col_name]])) {
col_values <- as.character(col_values)
}
# Display the column with proper alignment
display_column(col_name, col_class_abbr, col_values, max_col_name_length)
}
}
# Function to get the appropriate number of
# elements to display for each vector
get_display_length <- function(x) {
# Default value for vec.len from options("str") (default is 4)
vec_len <- getOption("str")$vec.len %||% 4
# Adjust based on the type of vector
if (is.factor(x)) {
return(vec_len * 2)
} else if (is.numeric(x) || is.integer(x)) {
return(vec_len * 3)
} else {
return(vec_len * 2)
}
}
# Function to get class abbreviations for common types
get_class_abbreviations <- function() {
return(c(
"factor" = "<fct>",
"numeric" = "<dbl>",
"character" = "<chr>",
"integer" = "<int>",
"logical" = "<lgl>",
"Date" = "<date>",
"POSIXct" = "<ct>"
))
}
find_colname_length <- function(x) {
max_length<- max(nchar(names(x))) + 5
return(max_length)
}
# Function to display individual column with class in lighter color
display_column <- function(col_name, col_class_abbr, col_values, max_col_name_length) {
# ANSI escape code for light gray color
light_color <- "\033[38;5;145m"
reset_color <- "\033[39m"
# Ensure that the column names have values
col_name_length <- if (length(col_name) > 0) nchar(col_name) else 0
# Fallback if max column name length is invalid (e.g., empty column names)
max_col_name_length <- ifelse(is.finite(col_name_length), max(col_name_length, max_col_name_length), max_col_name_length)
# Format and print the column details with aligned output
cat(sprintf("$ %-*s %s%s%s %s...\n",
max_col_name_length, col_name,
light_color, col_class_abbr, reset_color,
paste(col_values, collapse = ", ")))
}
peek(author_data)
peek <- function(x, width = getOption("width"), ...) {
UseMethod("peek")
}
peek(author_data)
peek(new_testament)
peek(nold_testament)
peek(old_testament)
library(dplyr)
library(tidyr)
library(stringr)
# New Testament files
files <- files <- list.files("raw_data/sblgnt/text", full.names = TRUE)
processed_files <- list()
# Loop over the files
for (i in seq_along(files)) {
# Read the file
file_data <- read.delim(files[i], header = TRUE, sep = "\t")
# Debugging: Check the file data
print(head(file_data))  # Ensure the file is being read correctly
# Extract the header name
greek_name <- colnames(file_data)[1]
colnames(file_data)[1] <- "text"
# Process the data
processed_files[[i]] <- file_data |>
as.data.frame() |>
tibble::rownames_to_column(var = "Reference") |>
mutate(Reference = trimws(Reference)) |>
separate(Reference, into = c("book", "ChapterVerse"), sep = " ", fill = "right") |>
separate(ChapterVerse, into = c("chapter", "verse"), sep = ":", fill = "right") |>
mutate(greek_name = greek_name,
chapter = as.numeric(chapter),
verse = as.numeric(verse))
}
# Combine all processed data into a single data frame
new_testament <- bind_rows(processed_files) |>
select(1:5)
usethis::use_data(new_testament)
usethis::use_data(new_testament, overwrite = TRUE)
load("data/new_testament.rda")
peek(new_testament)
load("data/author_data.rda")
View(author_data)
unique(author_data$section)
install.packages("available")
available::available("matriz")
available::available("matrix")
